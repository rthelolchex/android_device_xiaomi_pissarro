<?xml version="1.0" encoding="utf-8"?>
<!--
/*
** Copyright 2009, The Android Open Source Project
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
*/
-->
<!-- These resources are around just to allow their values to be customized
     for different hardware and product builds.  Do not translate.
     NOTE: The naming convention is "config_camelCaseValue". Some legacy
     entries do not follow the convention, but all new entries should. -->
<resources>
     <!-- Array of hysteresis constraint values for brightening, represented as tenths of a
          percent. The length of this array is assumed to be one greater than
          config_ambientThresholdLevels. The brightening threshold is calculated as
          lux * (1.0f + CONSTRAINT_VALUE). When the current lux is higher than this threshold,
          the screen brightness is recalculated. See the config_ambientThresholdLevels
          description for how the constraint value is chosen. -->
     <integer-array name="config_ambientBrighteningThresholds">
          <item>4</item>
          <item>5</item>
          <item>10</item>
          <item>30</item>
          <item>100</item>
          <item>400</item>
          <item>600</item>
          <item>1000</item>
     </integer-array>

     <!-- Array of hysteresis constraint values for darkening, represented as tenths of a
          percent. The length of this array is assumed to be one greater than
          config_ambientThresholdLevels. The darkening threshold is calculated as
          lux * (1.0f - CONSTRAINT_VALUE). When the current lux is lower than this threshold,
          the screen brightness is recalculated. See the config_ambientThresholdLevels
          description for how the constraint value is chosen. -->
     <integer-array name="config_ambientDarkeningThresholds">
          <item>800</item>
          <item>800</item>
          <item>500</item>
          <item>500</item>
          <item>500</item>
          <item>500</item>
          <item>500</item>
          <item>500</item>
     </integer-array>

     <!-- Array of ambient lux threshold values. This is used for determining hysteresis constraint
          values by calculating the index to use for lookup and then setting the constraint value
          to the corresponding value of the array. The new brightening hysteresis constraint value
          is the n-th element of config_ambientBrighteningThresholds, and the new darkening
          hysteresis constraint value is the n-th element of config_ambientDarkeningThresholds.
          The (zero-based) index is calculated as follows: (MAX is the largest index of the array)
          condition                       calculated index
          value < level[0]                0
          level[n] <= value < level[n+1]  n+1
          level[MAX] <= value             MAX+1 -->
     <integer-array name="config_ambientThresholdLevels">
          <item>2</item>
          <item>10</item>
          <item>30</item>
          <item>100</item>
          <item>800</item>
          <item>2000</item>
          <item>4000</item>
     </integer-array>

     <!-- Array of desired screen brightness in nits corresponding to the lux values
          in the config_autoBrightnessLevels array. As with config_screenBrightnessMinimumNits and
          config_screenBrightnessMaximumNits, the display brightness is defined as the measured
          brightness of an all-white image.
          If this is defined then:
               - config_autoBrightnessLcdBacklightValues should not be defined
               - config_screenBrightnessNits must be defined
               - config_screenBrightnessBacklight must be defined
          This array should have size one greater than the size of the config_autoBrightnessLevels
          array. The brightness values must be non-negative and non-decreasing. This must be
          overridden in platform specific overlays -->
     <array name="config_autoBrightnessDisplayValuesNits">
          <item>3.5</item>
          <item>4.3</item>
          <item>5</item>
          <item>17</item>
          <item>24</item>
          <item>31</item>
          <item>34</item>
          <item>46</item>
          <item>59</item>
          <item>76</item>
          <item>81</item>
          <item>82</item>
          <item>82</item>
          <item>82</item>
          <item>83</item>
          <item>83</item>
          <item>83</item>
          <item>84</item>
          <item>84</item>
          <item>85</item>
          <item>85</item>
          <item>85</item>
          <item>85</item>
          <item>86</item>
          <item>86</item>
          <item>87</item>
          <item>89</item>
          <item>90</item>
          <item>91</item>
          <item>93</item>
          <item>94</item>
          <item>96</item>
          <item>97</item>
          <item>99</item>
          <item>100</item>
          <item>101</item>
          <item>104</item>
          <item>105</item>
          <item>106</item>
          <item>108</item>
          <item>109</item>
          <item>111</item>
          <item>112</item>
          <item>114</item>
          <item>116</item>
          <item>137</item>
          <item>157</item>
          <item>180</item>
          <item>205</item>
          <item>226</item>
          <item>257</item>
          <item>280</item>
          <item>295</item>
          <item>369</item>
          <item>434</item>
          <item>450</item>
          <item>450</item>
          <item>450</item>
     </array>

     <!-- Array of output values for LCD backlight corresponding to the LUX values
          in the config_autoBrightnessLevels array.  This array should have size one greater
          than the size of the config_autoBrightnessLevels array.
          This must be overridden in platform specific overlays -->
     <integer-array name="config_autoBrightnessLcdBacklightValues">
          <item>16</item>
          <item>23</item>
          <item>25</item>
          <item>75</item>
          <item>110</item>
          <item>142</item>
          <item>155</item>
          <item>208</item>
          <item>270</item>
          <item>344</item>
          <item>369</item>
          <item>371</item>
          <item>373</item>
          <item>375</item>
          <item>376</item>
          <item>377</item>
          <item>379</item>
          <item>381</item>
          <item>383</item>
          <item>385</item>
          <item>386</item>
          <item>387</item>
          <item>389</item>
          <item>391</item>
          <item>392</item>
          <item>397</item>
          <item>404</item>
          <item>409</item>
          <item>416</item>
          <item>421</item>
          <item>429</item>
          <item>437</item>
          <item>441</item>
          <item>451</item>
          <item>454</item>
          <item>460</item>
          <item>471</item>
          <item>476</item>
          <item>481</item>
          <item>492</item>
          <item>496</item>
          <item>503</item>
          <item>511</item>
          <item>519</item>
          <item>526</item>
          <item>624</item>
          <item>715</item>
          <item>821</item>
          <item>932</item>
          <item>1029</item>
          <item>1167</item>
          <item>1273</item>
          <item>1340</item>
          <item>1678</item>
          <item>1976</item>
          <item>2047</item>
          <item>2047</item>
          <item>2047</item>
     </integer-array>

     <!-- Array of light sensor LUX values to define our levels for auto backlight brightness support.
          The N entries of this array define N  1 zones as follows:
          Zone 0:        0 <= LUX < array[0]
          Zone 1:        array[0] <= LUX < array[1]
          ...
          Zone N:        array[N - 1] <= LUX < array[N]
          Zone N + 1     array[N] <= LUX < infinity
          Must be overridden in platform specific overlays -->
     <integer-array name="config_autoBrightnessLevels">
          <item>1</item>
          <item>2</item>
          <item>4</item>
          <item>6</item>
          <item>8</item>
          <item>10</item>
          <item>15</item>
          <item>20</item>
          <item>25</item>
          <item>30</item>
          <item>35</item>
          <item>40</item>
          <item>45</item>
          <item>50</item>
          <item>55</item>
          <item>60</item>
          <item>65</item>
          <item>70</item>
          <item>75</item>
          <item>80</item>
          <item>85</item>
          <item>90</item>
          <item>95</item>
          <item>100</item>
          <item>120</item>
          <item>140</item>
          <item>160</item>
          <item>180</item>
          <item>200</item>
          <item>220</item>
          <item>240</item>
          <item>260</item>
          <item>280</item>
          <item>300</item>
          <item>320</item>
          <item>340</item>
          <item>360</item>
          <item>380</item>
          <item>400</item>
          <item>420</item>
          <item>440</item>
          <item>460</item>
          <item>480</item>
          <item>500</item>
          <item>700</item>
          <item>900</item>
          <item>1100</item>
          <item>1300</item>
          <item>1500</item>
          <item>1700</item>
          <item>1900</item>
          <item>2000</item>
          <item>2500</item>
          <item>3000</item>
          <item>3500</item>
          <item>4000</item>
          <item>4500</item>
     </integer-array>
     <integer-array name="config_hightGrayBrightnessLevels">
          <item>300</item>
          <item>1000</item>
          <item>2400</item>
          <item>3000</item>
          <item>4095</item>
     </integer-array>


     <integer-array name="config_lowGrayBrightnessLevels">
          <item>200</item>
          <item>300</item>
          <item>1400</item>
          <item>1600</item>
          <item>4095</item>
     </integer-array>

     <!-- Array of hysteresis constraint values for brightening, represented as tenths of a
          percent. The length of this array is assumed to be one greater than
          config_screenThresholdLevels. The brightening threshold is calculated as
          screenBrightness * (1.0f + CONSTRAINT_VALUE). When the new screen brightness is higher
          than this threshold, it is applied. See the config_screenThresholdLevels description for
          how the constraint value is chosen. -->
     <integer-array name="config_screenBrighteningThresholds">
          <item>0</item>
     </integer-array>

     <!-- Array of hysteresis constraint values for darkening, represented as tenths of a
          percent. The length of this array is assumed to be one greater than
          config_screenThresholdLevels. The darkening threshold is calculated as
          screenBrightness * (1.0f - CONSTRAINT_VALUE). When the new screen brightness is lower than
          this threshold, it is applied. See the config_screenThresholdLevels description for how
          the constraint value is chosen. -->
     <integer-array name="config_screenDarkeningThresholds">
          <item>0</item>
     </integer-array>

     <!-- Flag indicating whether we should enable the automatic brightness.
          Software implementation will be used if config_hardware_auto_brightness_available is not set -->
     <bool name="config_automatic_brightness_available">true</bool>

     <!-- Whether WiFi display is supported by this device.
          There are many prerequisites for this feature to work correctly.
          Here are a few of them:
          * The WiFi radio must support WiFi P2P.
          * The WiFi radio must support concurrent connections to the WiFi display and
               to an access point.
          * The Audio Server audio_policy_configuration.xml file must specify a rule for
               the "r_submix" remote submix module.  This module is used to record and stream system
               audio output to the WiFi display encoder in the media server.
          * The remote submix module "audio.r_submix.default" must be installed on the device.
          * The device must be provisioned with HDCP keys (for protected content).
     -->
     <bool name="config_enableWifiDisplay">true</bool>

     <!-- Whether a software navigation bar should be shown. NOTE: in the future this may be
          autodetected from the Configuration. -->
     <bool name="config_showNavigationBar">true</bool>

     <!-- Indicate whether to allow the device to suspend when the screen is off
          due to the proximity sensor.  This resource should only be set to true
          if the sensor HAL correctly handles the proximity sensor as a wake-up source.
          Otherwise, the device may fail to wake out of suspend reliably.
          The default is false. -->
     <bool name="config_suspendWhenScreenOffDueToProximity">true</bool>

     <!-- The maximum range of gamma adjustment possible using the screen
          auto-brightness adjustment setting. -->
     <fraction name="config_autoBrightnessAdjustmentMaxGamma">100.0%</fraction>

     <!-- Stability requirements in milliseconds for accepting a new brightness level.  This is used
          for debouncing the light sensor.  Different constants are used to debounce the light sensor
          when adapting to brighter or darker environments.  This parameter controls how quickly
          brightness changes occur in response to an observed change in light level that exceeds the
          hysteresis threshold. -->
     <integer name="config_autoBrightnessBrighteningLightDebounce">1000</integer>
     <integer name="config_autoBrightnessDarkeningLightDebounce">1000</integer>

     <!-- Fast brightness animation ramp rate in brightness units per second-->
     <integer name="config_brightness_ramp_rate_fast">2466</integer>

     <!-- Slow brightness animation ramp rate in brightness units per second-->
     <integer name="config_brightness_ramp_rate_slow">1973</integer>

     <!-- The default peak refresh rate for a given device. Change this value if you want to prevent
          the framework from using higher refresh rates, even if display modes with higher refresh
          rates are available from hardware composer. Only has an effect if the value is
          non-zero. -->
     <integer name="config_defaultPeakRefreshRate">120</integer>

     <!-- Number of physical SIM slots on the device. This includes both eSIM and pSIM slots, and
          is not necessarily the same as the number of phones/logical modems supported by the device.
          For example, a multi-sim device can have 2 phones/logical modems, but 3 physical slots,
          or a single SIM device can have 1 phones/logical modems, but 2 physical slots (one eSIM
          and one pSIM) -->
     <integer name="config_num_physical_slots">2</integer>

     <!-- Screen brightness used to dim the screen when the user activity
          timeout expires.  May be less than the minimum allowed brightness setting
          that can be set by the user. -->
     <integer name="config_screenBrightnessDim">12</integer>

     <!-- ComponentName of a dream to show whenever the system would otherwise have
          gone to sleep.  When the PowerManager is asked to go to sleep, it will instead
          try to start this dream if possible.  The dream should typically call startDozing()
          to put the display into a low power state and allow the application processor
          to be suspended.  When the dream ends, the system will go to sleep as usual.
          Specify the component name or an empty string if none.
          Note that doze dreams are not subject to the same start conditions as ordinary dreams.
          Doze dreams will run whenever the power manager is in a dozing state. -->
     <string name="config_dozeComponent">com.android.systemui/com.android.systemui.doze.DozeService</string>

     <!-- If true, the doze component is not started until after the screen has been
          turned off and the screen off animation has been performed. -->
     <bool name="config_dozeAfterScreenOffByDefault">true</bool>

     <!-- Enable doze alwaysOn Display -->
     <bool name="config_dozeAlwaysOnDisplayAvailable">true</bool>
     
     <!-- Control whether the always on display mode is enabled by default. This value will be used
          during initialization when the setting is still null. -->
     <bool name="config_dozeAlwaysOnEnabled">true</bool>
</resources>
